-- GROUP BY절
-- 여러개의 값들을 하나의 그룹으로 묶어서 처리할 목적으로 사용
SELECT NVL(DEPT_CODE, '부서 미배정'), SUM(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE ORDER BY DEPT_CODE;
SELECT NVL(DEPT_CODE, '부서 미배정'), COUNT(*) "직급별 사원수" FROM EMPLOYEE GROUP BY DEPT_CODE ORDER BY DEPT_CODE;
SELECT JOB_CODE, COUNT(*) "직급별 사원수", SUM(SALARY) "직급별 월급 합계" FROM EMPLOYEE GROUP BY JOB_CODE ORDER BY JOB_CODE;
SELECT JOB_CODE
, COUNT(BONUS) "보너스를 받는 직급별 사원수"
, SUM(SALARY) "직급별 월급 합계"
, ROUND(AVG(SALARY), -1) 평균급여
, MIN(SALARY) 최저급여
, MAX(SALARY) 최고급여 
FROM EMPLOYEE 
GROUP BY JOB_CODE 
ORDER BY JOB_CODE ASC;

SELECT CASE WHEN SUBSTR(EMP_NO, 8, 1) IN ('1', '3') THEN '남자' ELSE '여자' END, COUNT(*) FROM EMPLOYEE GROUP BY CASE WHEN SUBSTR(EMP_NO, 8, 1) IN ('1', '3') THEN '남자' ELSE '여자' END;

-- GROUP BY절에 여러 컬럼 기술 가능
SELECT DEPT_CODE, JOB_CODE, COUNT(*), SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE, JOB_CODE
ORDER BY DEPT_CODE, JOB_CODE;

-- HAVING절
-- 그룹에 대한 조건을 제시할 때 사용되는 구문
SELECT DEPT_CODE, ROUND(AVG(SALARY)) "부서별 평균급여(300만원 이상 부서)" FROM EMPLOYEE GROUP BY DEPT_CODE HAVING AVG(SALARY) >= 3000000; 

SELECT JOB_CODE, SUM(SALARY) FROM EMPLOYEE GROUP BY JOB_CODE HAVING SUM(SALARY) >= 10000000;

SELECT NVL(DEPT_CODE, '부서 미배정') FROM EMPLOYEE GROUP BY DEPT_CODE HAVING COUNT(BONUS) = 0 ORDER BY DEPT_CODE;

-- SELECT문이 실행되는 순서
-- 1. FROM 
-- 2. ON
-- 3. JOIN
-- 4. WHERE 
-- 5. GROUP BY 
-- 6. HAVING 
-- 7. SELECT
-- 8. DISTINCT
-- 9. ORDER BY

-- 집계함수
-- 그룹별로 산출된 결과 값에 중간집계를 계산해 주는 함수
-- ROLLUP, CUBE : GROUP BY절에 기술하는 함수
-- ROLLUP(컬럼1, 컬럼2) : 컬럼1을 가지고 다시 중간집계를 내는 함수
-- CUBE(컬럼1, 컬럼2) : 컬럼1을 가지고 중간집계를 내고, 컬럼2도 중간집계를 내는 함수

SELECT JOB_CODE, SUM(SALARY) 
FROM EMPLOYEE 
GROUP BY JOB_CODE 
ORDER BY JOB_CODE;

SELECT JOB_CODE, SUM(SALARY) 
FROM EMPLOYEE 
GROUP BY ROLLUP(JOB_CODE) 
ORDER BY JOB_CODE;
-- 컬럼이 1개 일때는 CUBE, ROLLUP, 안쓴 것 모두 동일

-- 컬럼이 2개 일때 사용
SELECT JOB_CODE, DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY JOB_CODE, DEPT_CODE
ORDER BY JOB_CODE, DEPT_CODE;

-- ROLLUP
SELECT JOB_CODE, DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE, DEPT_CODE)
ORDER BY JOB_CODE, DEPT_CODE;

-- CUBE
SELECT JOB_CODE, DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY CUBE(JOB_CODE, DEPT_CODE)
ORDER BY JOB_CODE, DEPT_CODE;

-- 집합 연산자
-- 여러개의 쿼리문을 가지고 하나의 쿼리문으로 만드는 연산자
-- UNION : OR|합집합
-- INTERSECT : AND|교집합
-- UNION ALL : 합집합 + 교집합
-- MINUS : 차집합
-- 주의사항 : 각 쿼리문의 SELECT절에 작성되는 컬럼은 동일해야 한다.

-- UNION
SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE DEPT_CODE = 'D5'
UNION
SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE SALARY >= 3000000 ORDER BY SALARY;

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE DEPT_CODE = 'D5' OR SALARY >= 3000000 ORDER BY SALARY; -- UNION을 사용한 구문과 동일

-- UNION ALL
SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE DEPT_CODE = 'D5'
UNION ALL
SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE SALARY >= 3000000 ORDER BY EMP_NAME;

-- INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE DEPT_CODE = 'D5'
INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE SALARY >= 3000000;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE DEPT_CODE = 'D5' AND SALARY >= 3000000; -- INTERSECT를 사용한 구문과 동일

-- MINUS
SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE DEPT_CODE = 'D5'
MINUS
SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE SALARY >= 3000000 ORDER BY EMP_NAME;

SELECT EMP_NAME, DEPT_CODE, SALARY FROM EMPLOYEE WHERE DEPT_CODE = 'D5' AND SALARY < 3000000 ORDER BY EMP_NAME;


