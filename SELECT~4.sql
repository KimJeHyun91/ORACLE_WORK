-- 관계형 데이터베이스는 최소한의 데이터로 각각 테이블에 담고 있음(중복을 최소화하기 위해)
-- 관계형 데이터베이스에서는 SQL문을 이용한 테이블간의 '관계'를 맺는 방법 : JOIN

-- JOIN
-- 두 개 이상의 테이블에서 데이터를 조회하고자 할 때 사용되는 구문
-- 조회 결과는 하나의 결과물(RESULT SET)으로 나옴
-- JOIN은 크게 '오라클 전용 구문'과 'ANSI 구문'(ANSI == 미국국립표준협회)이 있음
-- JOIN 용어
--          오라클 전용 구문                    |                   ANSI
--              등가 조인                      |    내부 조인(INNER JOIN) => JOIN USING/ON
--             EQUAL JOIN                     |    자연 조인(NATURAL JOIN) => JOIN USING

--              포괄 조인                      |       왼쪽 외부 조인(LEFT OUTER JOIN)
--            (LEFT OUTER)                    |      오른쪽 외부 조인(RIGHT OUTER JOIN)
--            (RIGHT OUTER)                   |       전체 외부 조인(FULL OUTER JOIN)

--         자체 조인(SELF JOIN)                |                  JOIN ON
--      비등가 조인(NON EQUAL JOIN)            |

--     카테시아급(CARTESIAN PRODUCT)           |              교차 조인(CROSS JOIN)

-- 1. 등가 조인(EQUAL JOIN)/내부 조인(INNER JOIN)
-- 연결시키는 컬럼의 값이 "일치하는 행들만" 조인되어 조회

-- 1.1 오라클 전용 구문
-- FROM절에 조회하고자 하는 테이블들을 나열
-- WHERE절에 매칭시킬 컬럼(연결고리)에 대한 조건 제시
-- 1) 연결할 두 컬럼명이 서로 다른 경우
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID; -- 일치하는 값이 없는 행은 조회 제외

-- 2) 연결할 두 컬럼명이 같은 경우
SELECT EMP_ID, EMP_NAME, EMPLOYEE.JOB_CODE, JOB_NAME
FROM EMPLOYEE, JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

SELECT EMP_ID, EMP_NAME, E.JOB_CODE, JOB_NAME
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE;

-- 3) 추가적인 조건도 제시 가능
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE, JOB
WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE AND JOB_NAME = '대리';

-- 1.2 ANSI 구문
-- FROM절에 기준이되는 테이블을 하나 기술한 후 
-- JOIN절에 같이 조회하고자 하는 테이블 기술 + 매칭시킬 컬럼에 대한 조건도 기술
-- JOIN USING, JOIN ON
-- 1) 연결할 두 컬럼명이 다를 경우
SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT
ON (DEPT_CODE = DEPT_ID);

-- 2) 연결할 두 컬럼명이 같은 경우
SELECT EMP_ID, EMP_NAME, E.JOB_CODE, JOB_NAME
FROM EMPLOYEE E
JOIN JOB J
ON (E.JOB_CODE = J.JOB_CODE);

SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE
JOIN JOB
USING(JOB_CODE);

SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM JOB
NATURAL JOIN EMPLOYEE; -- NATURAL JOIN은 공통된 컬럼을 자동으로 매칭시켜줌(공통된 컬럼은 한번만 반환)

-- 3) 추가적인 조건 제시 가능
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB
USING(JOB_CODE)
WHERE JOB_NAME = '대리';

------------------------------------------  실습 문제  -------------------------------------------
-- 모든 문제는 오라클 전용 구문과 ANSI 구문 2가지 모두 다 하기
-- 1. 부서가 인사관리부인 사원들의 사번, 이름, 부서명, 보너스 조회
-- 오라클
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, NVL(BONUS, 0)
FROM EMPLOYEE, DEPARTMENT
WHERE DEPARTMENT.DEPT_ID = EMPLOYEE.DEPT_CODE AND DEPARTMENT.DEPT_ID = 'D1';
-- ANSI
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, NVL(BONUS, 0)
FROM EMPLOYEE
JOIN DEPARTMENT
ON (DEPARTMENT.DEPT_ID = EMPLOYEE.DEPT_CODE)
WHERE EMPLOYEE.DEPT_CODE = 'D1';

-- 2. DEPARTMENT과 LOCATION을 참고하여 전체 부서의 부서코드, 부서명, 지역코드, 지역명 조회
-- 오라클
SELECT DEPT_ID, DEPT_TITLE, LOCAL_CODE, LOCAL_NAME
FROM DEPARTMENT, LOCATION
WHERE DEPARTMENT.LOCATION_ID = LOCATION.LOCAL_CODE;
-- ANSI
SELECT DEPT_ID, DEPT_TITLE, LOCAL_CODE, LOCAL_NAME
FROM DEPARTMENT
JOIN LOCATION
ON (DEPARTMENT.LOCATION_ID = LOCATION.LOCAL_CODE);

-- 3. 보너스를 받는 사원들의 사번, 사원명, 보너스, 부서명 조회
-- 오라클
SELECT EMP_ID, EMP_NAME, BONUS, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE EMPLOYEE.DEPT_CODE = DEPARTMENT.DEPT_ID AND BONUS IS NOT NULL;
-- ANSI
SELECT EMP_ID, EMP_NAME, BONUS, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT
ON(EMPLOYEE.DEPT_CODE = DEPARTMENT.DEPT_ID)
WHERE BONUS IS NOT NULL;

-- 4. 부서가 총무부가 아닌 사원들의 사원명, 급여, 부서명 조회
-- 오라클
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE EMPLOYEE.DEPT_CODE = DEPARTMENT.DEPT_ID AND DEPARTMENT.DEPT_TITLE != '총무부';
-- ANSI
SELECT EMP_NAME, SALARY, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT
ON (EMPLOYEE.DEPT_CODE = DEPARTMENT.DEPT_ID)
WHERE DEPARTMENT.DEPT_TITLE != '총무부';

-------------------------------------------------------------------------------------------
-- 2. 포괄 조인/외부 조인(OUTER JOIN)
-- 두 테이블간의 JOIN시 일치하지 않는 행도 포함시켜 조회
-- 단, 반드시 LEFT/RIFHT를 지정해야(기중이 되는 테이블 지정)

SELECT EMP_NAME, DEPT_CODE, SALARY, SALARY*12
FROM EMPLOYEE
JOIN DEPARTMENT  
ON (DEPT_CODE = DEPT_ID);

-- 2.1 LEFT [OUTER] JOIN : 두 테이블 중 왼쪽에 기술된 테이블을 기준으로 JOIN
-- ANSI
SELECT EMP_NAME, DEPT_TITLE, SALARY, SALARY*12
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- 오라클
SELECT EMP_NAME, DEPT_TITLE, SALARY, SALARY*12
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+); -- 기준이 되는 테이블의 반대편 테이블에 (+) 입력

-- 2.2 RIGHT[OUTER] JOIN : 두 테이블 중 오른쪽에 기술된 테이블을 기준으로 JOIN
-- ANSI
SELECT EMP_NAME, DEPT_TITLE, SALARY, SALARY*12
FROM EMPLOYEE
RIGHT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
-- 오라클
SELECT EMP_NAME, DEPT_TITLE, SALARY, SALARY*12
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE(+) = DEPT_ID; -- 기준이 되는 테이블의 반대편 테이블에 (+) 입력

-- 2.3 FULL[OUTER] JOIN : 두 테이블이 가진 모든 행 조회(오라클 전용구문은 사용 못함)
-- ANSI 
SELECT EMP_NAME, DEPT_TITLE, SALARY, SALARY*12
FROM EMPLOYEE
FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

-- 3. 비등가 조인(NON EQUAL JOIN)
-- 비등가 조인 : 매칭시킬 컬럼에 대한 조건 작성시 '=' 사용하지 않는 조인문
-- ANSI구문으로는 JOIN ON으로만 가능
-- 오라클 전용 구문
SELECT EMP_NAME, SALARY, SAL_LEVEL
FROM EMPLOYEE, SAL_GRADE
WHERE SALARY BETWEEN MIN_SAL AND MAX_SAL;
-- ANSI 구문
SELECT EMP_NAME, SALARY, SAL_LEVEL
FROM EMPLOYEE
JOIN SAL_GRADE
ON(SALARY BETWEEN MIN_SAL AND MAX_SAL);

-- 4. 자체 조인(SELF JOIN)
-- 같은 테이블을 다시 한번 조인하는 경우
-- 오라클 전용 구문
SELECT E1.EMP_ID, E1.EMP_NAME, E1.DEPT_CODE, E1.MANAGER_ID, E2.EMP_NAME, E2.DEPT_CODE
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.MANAGER_ID = E2.EMP_ID;

SELECT E1.EMP_ID, E1.EMP_NAME, E1.DEPT_CODE, E1.MANAGER_ID, E2.EMP_NAME, E2.DEPT_CODE
FROM EMPLOYEE E1, EMPLOYEE E2
WHERE E1.MANAGER_ID = E2.EMP_ID(+);

-- ANSL 구문
SELECT E1.EMP_ID, E1.EMP_NAME, E1.DEPT_CODE, E1.MANAGER_ID, E2.EMP_NAME, E2.DEPT_CODE
FROM EMPLOYEE E1
JOIN EMPLOYEE E2
ON(E1.MANAGER_ID = E2.EMP_ID);

SELECT E1.EMP_ID, E1.EMP_NAME, E1.DEPT_CODE, E1.MANAGER_ID, E2.EMP_NAME, E2.DEPT_CODE
FROM EMPLOYEE E1
LEFT JOIN EMPLOYEE E2
ON(E1.MANAGER_ID = E2.EMP_ID);

-- 5. 다중 조인
-- 2개 이상의 테이블을 조인할 때
-- 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE, DEPARTMENT, JOB
WHERE DEPT_CODE = DEPT_ID AND EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID AND LOCATION_ID = LOCAL_CODE
ORDER BY LOCAL_NAME;

-- ANSL 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT 
ON(DEPT_CODE = DEPT_ID)
JOIN JOB
USING(JOB_CODE);

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT 
ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION
ON(LOCATION_ID = LOCAL_CODE)
ORDER BY LOCAL_NAME;

------------------------------------------  실습 문제  -------------------------------------------
-- 1. 사번, 사원명, 부서명, 지역명, 국가명 조회(EMPLOYEE, DEPARTMENT, LOCATION, NATIONAL 조인)
-- 오라클
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE, DEPARTMENT, LOCATION, NATIONAL
WHERE DEPT_CODE = DEPT_ID AND LOCATION_ID = LOCAL_CODE AND LOCATION.NATIONAL_CODE = NATIONAL.NATIONAL_CODE;
-- ANSL 
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT
ON(DEPT_CODE = DEPT_ID)
JOIN LOCATION
ON(LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL
USING(NATIONAL_CODE);

-- 2. 사번, 사원명, 부서명, 직급명, 지역명, 국가명, 급여등급 조회 (모든 테이블 다 조인)
-- 오라클
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, LOCAL_NAME, NATIONAL_NAME, SAL_LEVEL
FROM EMPLOYEE, DEPARTMENT, JOB, LOCATION, NATIONAL, SAL_GRADE
WHERE DEPT_CODE = DEPT_ID 
 AND EMPLOYEE.JOB_CODE = JOB.JOB_CODE 
 AND LOCATION_ID = LOCAL_CODE
 AND LOCATION.NATIONAL_CODE = NATIONAL.NATIONAL_CODE
 AND SALARY BETWEEN MIN_SAL AND MAX_SAL;
-- ANSL
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, LOCAL_NAME, NATIONAL_NAME, SAL_LEVEL
FROM EMPLOYEE
JOIN DEPARTMENT
ON(DEPT_CODE = DEPT_ID)
JOIN JOB
USING(JOB_CODE)
JOIN LOCATION
ON(LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL
USING(NATIONAL_CODE)
JOIN SAL_GRADE
ON(SALARY BETWEEN MIN_SAL AND MAX_SAL)
ORDER BY SAL_LEVEL;
















