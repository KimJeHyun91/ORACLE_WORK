-- 서브쿼리
-- 하나의 쿼리문 안에 포함된 또다른 SELECT문
-- 메인 SQL문의 보조 역할을 하는 쿼리문
SELECT *
FROM EMPLOYEE
WHERE DEPT_CODE = (SELECT DEPT_CODE FROM EMPLOYEE WHERE EMP_NAME = '박정보');

SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE);

-- 서브쿼리의 구분
-- 서브쿼리를 수행한 결과값이 몇행 몇열이냐에 따라 분류
-- 1. 단일행 서브쿼리 : 서브쿼리를 실행한 결과가 오로지 1개일 때(한행 한열)
-- 2. 다중행 서브쿼리 : 서브쿼리를 실행한 결과가 여러행 일때(여러행 한열)
-- 3. 다중열 서브쿼리 : 서브쿼리를 실행한 결과가 여러열 일때(한행 여러열)
-- 4. 다중행 다중열 서브쿼리 : 서브쿼리를 실행한 결과가 여러행, 여러열 일때(여러행 여러열)
-- 서브쿼리의 종류가 무엇이냐에 따라 서브쿼리 앞에 붙는 연산자가 달라짐

-- 1. 단일행 서브쿼리(SINGLE ROW SUBQUERY)
-- 비교연산자 사용가능
-- =, !=, >, <, 
SELECT EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEE)
ORDER BY SALARY;

SELECT EMP_ID, EMP_NAME, SALARY, HIRE_DATE
FROM EMPLOYEE
WHERE SALARY = (SELECT MIN(SALARY) FROM EMPLOYEE);

SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '박정보');

-- 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, SALARY
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID AND SALARY > (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '박정보');

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, SALARY
FROM EMPLOYEE
JOIN DEPARTMENT
ON(DEPT_CODE = DEPT_ID)
WHERE SALARY > (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '박정보');

-- 오라클 전용 구문
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID AND DEPT_CODE = (SELECT DEPT_CODE FROM EMPLOYEE WHERE EMP_NAME = '지정보') AND EMP_NAME != '지정보';

SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
JOIN DEPARTMENT
ON(DEPT_CODE = DEPT_ID)
WHERE DEPT_CODE = (SELECT DEPT_CODE FROM EMPLOYEE WHERE EMP_NAME = '지정보') AND EMP_NAME != '지정보';

SELECT DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE  
GROUP BY DEPT_CODE
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY)) FROM EMPLOYEE GROUP BY DEPT_CODE);

-- 2. 다중행 서브쿼리
-- IN 서브쿼리 : 여러개의 결과값 중 한개라도 일치하는 값이 있는 경우
-- > ANY 서브쿼리 : 여러개의 결과값 중 한개라도 클 경우
-- < ANY 서브쿼리 : 여러개의 결과값 중 한개라도 작은 경우
-- > ALL | < ALL : 서브쿼리의 값들 중 가장 큰값보다 더 큰 값을 얻어올 때 | 서브쿼리의 값들 중 가장 작은 값보다 더 작은 값을 얻어올 때

-- IN
SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE JOB_CODE IN (SELECT JOB_CODE FROM EMPLOYEE WHERE EMP_NAME IN ('조정연', '지정보'));

-- > ANY
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE, JOB
WHERE SALARY > ANY (SELECT SALARY FROM EMPLOYEE, JOB WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE AND JOB_NAME = '과장') AND JOB_NAME = '대리' AND EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE, JOB
WHERE SALARY > (SELECT MIN(SALARY) FROM EMPLOYEE, JOB WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE AND JOB_NAME = '과장') AND JOB_NAME = '대리' AND EMPLOYEE.JOB_CODE = JOB.JOB_CODE;

-- < ANY
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB
USING (JOB_CODE)
WHERE SALARY < ANY (SELECT SALARY FROM EMPLOYEE JOIN JOB USING (JOB_CODE) WHERE JOB_NAME = '과장') AND JOB_NAME = '차장';

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB
USING (JOB_CODE)
WHERE SALARY < (SELECT MAX(SALARY) FROM EMPLOYEE JOIN JOB USING (JOB_CODE) WHERE JOB_NAME = '과장') AND JOB_NAME = '차장';

-- ALL
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB
USING (JOB_CODE)
WHERE SALARY > ALL (SELECT SALARY FROM EMPLOYEE JOIN JOB USING (JOB_CODE) WHERE JOB_NAME = '차장') AND JOB_NAME = '과장';

SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB
USING (JOB_CODE)
WHERE SALARY > (SELECT MAX(SALARY) FROM EMPLOYEE JOIN JOB USING (JOB_CODE) WHERE JOB_NAME = '차장') AND JOB_NAME = '과장';

-- 3. 다중열 서브쿼리
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE
WHERE DEPT_CODE = (SELECT DEPT_CODE FROM EMPLOYEE WHERE EMP_NAME = '구정하') 
 AND JOB_CODE = (SELECT JOB_CODE FROM EMPLOYEE WHERE EMP_NAME = '구정하');

-- 4. 다중행 서브쿼리
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE
WHERE (DEPT_CODE, JOB_CODE) = (SELECT DEPT_CODE, JOB_CODE FROM EMPLOYEE WHERE EMP_NAME = '구정하'); -- DEPT_CODE와 JOB_CODE의 순서는 같아야 함

SELECT EMP_ID, EMP_NAME, JOB_CODE, MANAGER_ID
FROM EMPLOYEE
WHERE (JOB_CODE, MANAGER_ID) = (SELECT JOB_CODE, MANAGER_ID FROM EMPLOYEE WHERE EMP_NAME = '하정연'); 

-- 5. 다중행 다중열 서브쿼리
SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE (JOB_CODE, SALARY) IN (SELECT JOB_CODE, MIN(SALARY) FROM EMPLOYEE GROUP BY JOB_CODE)
ORDER BY JOB_CODE;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE (DEPT_CODE, SALARY) IN (SELECT DEPT_CODE, MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE)
ORDER BY DEPT_CODE;

-- 인라인 뷰(INLINE VIEW)
-- FROM절에 서브쿼리 작성 :서브쿼리 결과를 마치 테이블처럼 사용
SELECT 사번, 사원명, "보너스 포함 연봉", 부서명
FROM (SELECT EMP_ID 사번, EMP_NAME 사원명, SALARY*(1+NVL(BONUS, 0))*12 "보너스 포함 연봉", NVL(DEPT_CODE, '부서 미배정') 부서명 FROM EMPLOYEE)
WHERE "보너스 포함 연봉" > 30000000;
-- TOP-N 분석(상위 몇위까지만 가져오기)
-- ROWNUM : 오라클에서 제공해주는 컬럼. 조회된 순서대로 1부터 순번을 부여해주는 컬럼 
SELECT ROWNUM 순서, EMP_NAME, SALARY
FROM (SELECT EMP_NAME, SALARY FROM EMPLOYEE ORDER BY SALARY DESC)
WHERE ROWNUM <= '5';

SELECT ROWNUM, 순서.*
FROM (SELECT EMP_NAME, SALARY FROM EMPLOYEE ORDER BY SALARY DESC) 순서
WHERE ROWNUM <= '5';

SELECT EMP_NAME, SALARY, HIRE_DATE
FROM (SELECT * FROM EMPLOYEE ORDER BY HIRE_DATE)
WHERE ROWNUM <= 3;

SELECT ROWNUM, DEPT_CODE, 평균급여
FROM (SELECT DEPT_CODE, CEIL(AVG(SALARY)) 평균급여 FROM EMPLOYEE GROUP BY DEPT_CODE ORDER BY 평균급여 DESC)
WHERE ROWNUM <= 3;

-- WITH : 서브쿼리에 이름으 붙여주고 인라인 뷰로 사용시 서브쿼리의 이름을 FROM절에 기술
-- 장점 : 같은 서브쿼리가 여러 번 사용될 경우 중복 작성을 피할 수 있음, 실행 속도도 약간 빠름
WITH TOP AS (SELECT DEPT_CODE, CEIL(AVG(SALARY)) 평균급여 FROM EMPLOYEE GROUP BY DEPT_CODE ORDER BY 평균급여 DESC)

SELECT DEPT_CODE, 평균급여
FROM TOP
WHERE ROWNUM <= 5;

SELECT *
FROM TOP; -- WITH은 ;까지만 사용가능 

-- 순위 매기는 함수
-- RANK(),OBER(정렬기준) | DENSE_RANK() OVER(정렬기준)
-- 1) RANK() OVER(정렬기준) : 동일한 순위 이후의 등수를 동일한 인원수 만큼 건너뛰어 순위 계산 
-- 2) DENSE_RANK() OVER(정렬기준) : 동일한 순위 이후의 등수를 무조건 1증가 시킴
-- SELECT절에서만 사용 가능
SELECT EMP_NAME, SALARY, RANK() OVER(ORDER BY SALARY DESC) RANK
FROM EMPLOYEE;

SELECT EMP_NAME, SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) RANK
FROM EMPLOYEE;

SELECT *
FROM (SELECT EMP_NAME, SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) RANK FROM EMPLOYEE)
WHERE RANK <= 5;

------------------------------- SUBQUERY_연습문제 ----------------------------------------------
-- 1. 70년대 생(1970~1979) 중 여자이면서 전씨인 사원의 사원명, 주민번호, 부서명, 직급명 조회
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT
ON (DEPT_CODE = DEPT_ID)
JOIN JOB
USING (JOB_CODE)
WHERE EMP_NAME LIKE '전%' AND SUBSTR(EMP_NO, 8, 1) = '2' AND SUBSTR(EMP_NO, 1, 2) BETWEEN '70' AND '79';

-- 2. 나이가 가장 막내의 사번, 사원명, 나이, 부서명, 직급명 조회
SELECT EMP_ID, EMP_NAME, EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) 나이, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID
JOIN JOB
USING (JOB_CODE)
WHERE EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD'))
= (SELECT MIN(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD'))) FROM EMPLOYEE); 

WITH AGE AS (SELECT EMP_NAME, EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 6), 'RRMMDD')) 나이 FROM EMPLOYEE)
SELECT EMP_ID, EMP_NAME, 나이, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN AGE
USING (EMP_NAME)
JOIN DEPARTMENT
ON DEPT_CODE = DEPT_ID
JOIN JOB
USING (JOB_CODE)
WHERE 나이 = (SELECT MIN(나이) FROM AGE);
 
-- 3. 이름에 ‘하’가 들어가는 사원의 사번, 사원명, 직급명 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB
USING (JOB_CODE)
WHERE EMP_NAME LIKE '%하%';

-- 4. 부서 코드가 D5이거나 D6인 사원의 사원명, 직급명, 부서코드, 부서명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN JOB
USING (JOB_CODE)
JOIN DEPARTMENT
ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_CODE IN ('D5', 'D6');

-- 5. 보너스를 받는 사원의 사원명, 보너스, 부서명, 지역명 조회
SELECT EMP_NAME, BONUS, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT
ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION
ON (LOCATION_ID = LOCAL_CODE)
WHERE BONUS IS NOT NULL;

-- 6. 모든 사원의 사원명, 직급명, 부서명, 지역명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT
ON(DEPT_CODE = DEPT_ID)
LEFT JOIN LOCATION
ON(LOCATION_ID = LOCAL_CODE)
JOIN JOB
USING(JOB_CODE);

SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE, JOB, DEPARTMENT, LOCATION
WHERE DEPT_CODE = DEPT_ID(+)
 AND EMPLOYEE.JOB_CODE = JOB.JOB_CODE
 AND LOCATION_ID = LOCAL_CODE(+);

-- 7. 한국이나 일본에서 근무 중인 사원의 사원명, 부서명, 지역명, 국가명 조회 
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT
ON (DEPT_CODE = DEPT_ID)
JOIN LOCATION
ON (LOCATION_ID = LOCAL_CODE)
JOIN NATIONAL
USING (NATIONAL_CODE)
WHERE NATIONAL_NAME IN ('한국', '일본');

-- 8. 하정연 사원과 같은 부서에서 일하는 사원의 사원명, 부서코드 조회
SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE = (SELECT DEPT_CODE FROM EMPLOYEE WHERE EMP_NAME = '하정연');

-- 9. 보너스가 없고 직급 코드가 J4이거나 J7인 사원의 사원명, 직급명, 급여 조회 (NVL 이용)
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB
USING (JOB_CODE)
WHERE NVL(BONUS, 0) = 0 AND JOB_CODE IN ('J4', 'J7');

-- 10. 퇴사 하지 않은 사람과 퇴사한 사람의 수 조회
SELECT CASE WHEN END_DATE IS NULL THEN '퇴사한 사원' ELSE '근로중인 사원' END 분류, COUNT(*) 수
FROM EMPLOYEE
GROUP BY CASE WHEN END_DATE IS NULL THEN '퇴사한 사원' ELSE '근로중인 사원' END;

-- 11. 보너스 포함한 연봉이 높은 5명의 사번, 사원명, 부서명, 직급명, 입사일, 순위 조회
SELECT *
FROM (
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE, SALARY*(1+NVL(BONUS, 0)*12) "보너스 포함 연봉"
    FROM EMPLOYEE 
    JOIN DEPARTMENT 
    ON (DEPT_CODE = DEPT_ID) 
    JOIN 
    JOB USING (JOB_CODE)
    ORDER BY "보너스 포함 연봉" DESC
    )
WHERE ROWNUM <=5;

SELECT *
FROM (
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE, RANK() OVER(ORDER BY SALARY*(1+NVL(BONUS, 0)*12) DESC) 순위
    FROM EMPLOYEE 
    JOIN DEPARTMENT 
    ON (DEPT_CODE = DEPT_ID) 
    JOIN 
    JOB USING (JOB_CODE)
    )
WHERE 순위 <= 5;

-- 12. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서명, 부서별 급여 합계 조회
--	12-1. JOIN과 HAVING 사용 
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
JOIN DEPARTMENT
ON(DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > (SELECT SUM(SALARY) FROM EMPLOYEE)*0.2;

--	12-2. 인라인 뷰 사용
SELECT *
FROM (
    SELECT DEPT_TITLE, SUM(SALARY) 급여합계
    FROM EMPLOYEE
    JOIN DEPARTMENT
    ON (DEPT_CODE = DEPT_ID)
    GROUP BY DEPT_TITLE
    )
WHERE 급여합계 > (SELECT SUM(SALARY) FROM EMPLOYEE)*0.2;

--	12-3. WITH 사용
WITH "부서별 급여 합계" 
AS  (
    SELECT DEPT_TITLE, SUM(SALARY) 급여합계
    FROM EMPLOYEE
    JOIN DEPARTMENT
    ON (DEPT_CODE = DEPT_ID)
    GROUP BY DEPT_TITLE
    )

SELECT *
FROM "부서별 급여 합계"
WHERE 급여합계 > (SELECT SUM(SALARY) FROM EMPLOYEE)*0.2;
    
-- 13. 부서명별 급여 합계 조회(NULL도 조회되도록)
SELECT NVL(DEPT_TITLE, '부서 미배정') 부서명, NVL(SUM(SALARY), 0) "부서별 급여 합계"
FROM EMPLOYEE
FULL JOIN DEPARTMENT
ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;

-- 14. WITH를 이용하여 급여합과 급여평균 조회
WITH 
급여합테이블 AS (SELECT SUM(SALARY) 급여합 FROM EMPLOYEE),
급여평균테이블 AS (SELECT AVG(SALARY) 급여평균 FROM EMPLOYEE)

SELECT 급여합, 급여평균
FROM 급여합테이블, 급여평균테이블;






