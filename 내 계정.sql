/*
홀 따움표(') : 문자열을 감싸주는 기호
쌍 따움표(") : 컬럼명을 감싸주는 기호
*/
/*
SELECT
- 데이터를 조회할 때 사용하는 구문

>> RESULT SET : SELECT문을 통해 조회된 결과물(조회된 행들의 집합)

SELECT 조회하려는 컬럼명, 컬럼명, ...
FROM 테이블명
*/

-- EMPLOYEE 테이블의 모든 필드 조회
SELECT *
FROM EMPLOYEE;

-- EMPLOYEE 테이블의 특정 필드 조회
SELECT EMP_ID,EMP_NAME,SALARY
FROM EMPLOYEE;

-- JOB 테이블의 모든 필드 조회
SELECT *
FROM JOB;

-- JOB 테이블의 직급명 필드만 조회
SELECT JOB_NAME
FROM JOB;

-- DEPARTMENT 테이블의 모든 필드 조회
SELECT *
FROM DEPARTMENT;

-- DEPARTMENT 테이블의 부서코드, 부서명 조회
SELECT DEPT_ID,DEPT_TITLE
FROM DEPARTMENT;

-- EMPLOYEE 테이블에서 사원명, 이메일, 전화번호, 입사일, 급여 조회
SELECT EMP_NAME,EMAIL,PHONE,HIRE_DATE,SALARY
FROM EMPLOYEE;

/*
컬럼값을 통한 산술연산
SELECT절 컬럼명 작성부분에 산술연산을 기술할 수 있음(산술 연산된 결과 조회)
*/
-- EMPLOYEE 테이블에서 사원명, 사원의 연봉(급여*12) 조회
SELECT EMP_NAME, SALARY*12
FROM EMPLOYEE;

-- EMPLOYEE 테이블에서 사원명, 급여, 보너스, 연봉, 보너스가 포함된 연봉 조회
SELECT EMP_NAME, SALARY, BONUS, SALARY*12, (SALARY+SALARY*BONUS)*12
FROM EMPLOYEE;
-- 산술연산 과정 중 NULL 값이 존재할 경우 산술연산한 결과값도 무조건 NULL값으로 나옴

-- EMPLOYEE 테이블에서 사원명, 입사일, 근무일수 조회
-- DATE 형식도 연산가능 : 결과값은 일 단위로 나옴
-- 오늘 날짜 : SYSDATE
SELECT EMP_NAME, HIRE_DATE, SYSDATE-HIRE_DATE
FROM EMPLOYEE;
-- 근무일수 소수점 이하는 시분초 단위로 계산하기 때문

/*
컬럼명에 별칭 지정
- 산술연산시 컬럼명이 산술에 들어간 수식 그대로 컬럼명이 됨. 이 때 별칭을 부여할 수 있음.

컬럼명 별칭 / 컬럼명 AS 별칭 / 컬럼명 "별칭" / 컬럼명 AS "별칭"

*별칭에 반드시 쌍 따움표(")가 들어가야 하는 경우
별칭에 띄어스기가 있거나, 특수문자가 포함되어 있는 경우
*/

SELECT EMP_NAME, SALARY, BONUS, SALARY*12 AS 연봉, (SALARY+SALARY*BONUS)*12 AS "보너스 포함 연봉"
FROM EMPLOYEE;

SELECT EMP_NAME, SALARY, BONUS, SALARY*12 "연봉(원)", (SALARY+SALARY*BONUS)*12 보너스_연봉
FROM EMPLOYEE;

/*
리터럴
임의로 지정한 문자열을 컴럼처럼 넣을 수 있음

SELECT 절에 리터럴에 넣으면 테이블상에 존재하는 데이터처럼 조회 가능
조회된 RESULT SET의 모든 행에 반복적으로 같이 출력
*/

-- EMPLOYEE 테이블에서 사번, 사원명, 급여, 원 조회
SELECT EMP_ID, EMP_NAME, SALARY, '원' AS 단위
FROM EMPLOYEE;

-- EMPLOYEE 테이블에서 사번, 사원명, 급여, 원, 보너스 % 조회
SELECT EMP_ID, EMP_NAME, SALARY, '원' AS 단위, BONUS, '%' "단위(%)"
FROM EMPLOYEE;

/*
연결 연산자
-여러 컬럼값들을 마치 하나와 컬럼있는것처럼 컴럼값과 리터럴을 연결할 수 있음
*/

-- EMPLOYEE 테이블에서 사번, 사원명, 급여를 하나의 컬럼으로 조회
SELECT EMP_ID || EMP_NAME || SALARY 종합정보


-- ???의 월급은 ???원 입니다. 1컬럼으로 조회
SELECT EMP_NAME || '의 월급은' || SALARY || '원 입니다.'
FROM EMPLOYEE;

-- EMPLOYEE 테이블에서 사원명, 급여원 으로 조회
SELECT EMP_NAME, SALARY || '원' AS SALARY
FROM EMPLOYEE;


/*
DISTINCT
- 컬럼에서 중복된 값들은 한번씩만 표시
*/ 

SELECT JOB_CODE
FROM EMPLOYEE;

// EMPLOYEE 테이블에서 직급코드의 중복제거한 데이터 조회(하나의 필드만 됨)
SELECT DISTINCT JOB_CODE
FROM EMPLOYEE;
// 유의사항 : DISTINCT는 SELECT 절에서 딱 한번만 기술 가능

SELECT DISTINCT JOB_CODE, DEPT,CODE
FROM EMPLOYEE;
-- 조합으로 겹치지 않는것 조회

/*
WHERE절
조회하고자하는 테이블에서 특정 조건에 맞는 데이터만 조회할 때
WHERE절에 조건식을 제시함
조건식에는 다양한 연산자를 사용 가능

SELECT 컬럼명, 컬럼명, ...
FROM 테이블명
WHERE 조건식

비교연산자
대소비교 : >, <, >=, <=
같은지 비교 : =
같지 않은지 비교 : !=, ^=, <>
*/

-- EMPLOYEE 테이블에서 부서코드가 'D9'인 사원들의 모든 컬럼 조회
SELECT *
FROM EMPLOYEE
WHERE DEPT_CODE = 'D9';

-- EMPLOYEE 테이블에서 부서코드가 'D1'인 사원들의 사번, 사원명, 부서코드 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE = 'D1';

-- EMPLOYEE 테이블에서 부서코드가 'D1'이 아닌 사원들의 사번, 사원명, 부서코드 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE != 'D1' AND DEPT_CODE != 'D2';

-- EMPLOYEE 테이블에서 급여가 400만원 이상인 사원들의 사원명, 부서코드, 급여 조회
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY >= 4000000;

-- EMPLOYEE 테이블에서 재직중인 사원들의 사번, 사원명, 이름, 입사일, 퇴직여부 조회
SELECT EMP_ID, EMP_NAME, HIRE_DATE, ENT_YN
FROM EMPLOYEE
WHERE ENT_YN = 'N';

-- EMPLOYEE 테이블에서 급여가 300만원 이상인 사람들의 사원명, 급여, 입사일, 연봉 조회
SELECT EMP_NAME, SALARY, HIRE_DATE, SALARY*12 연봉
FROM EMPLOYEE
WHERE SALARY >= 3000000;

-- EMPLOYEE 테이블에서 연봉이 5000만원 이상인 사람들의 사원명, 급여, 연봉, 부서코드 조회
SELECT EMP_NAME, SALARY, SALARY*12 연봉, DEPT_CODE
FROM EMPLOYEE
WHERE SALARY*12 >= 50000000;

-- EMPLOYEE 테이블에서 직급코드가 'J3'이 아닌 사람들의 사번, 사원명, 직급코드, 퇴사여부 조회
SELECT EMP_ID, EMP_NAME, JOB_CODE, ENT_YN
FROM EMPLOYEE
WHERE JOB_CODE != 'J3';

/*
논리연산자
여러 조건을 묶어서 제시하고자 할 때

AND(~이면서, 그리고)
OR(~이거나, 또는)
*/

-- EMPLOYEE 테이블에서 부서코드가 'D9'이면서 급여가 500만원 이상인 사원들의 사원명, 부서코드, 급여 조회
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D9' AND SALARY >= 5000000;

-- EMPLOYEE 테이블에서 부서코드가 'D6'이거나 급여가 300만원 이상인 사원들의 사원명, 부서코드, 급여 조회
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D6' OR SALARY >= 3000000;

-- EMPLOYEE 테이블에서 급여가 350만원 이상 600만원 이하인 사원들의 사번, 사원명, 급여 조회
SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY >= 3500000 AND SALARY <= 6000000;

/*
BETWEEN AND
조건식에서 사용되는 구문
~ 이상 ~ 이하인 범위에 대한 조건 제시에 사용되는 연산자

비교대상컬럼 BETWEEN 하한값 AND 상한값
- 해당 컬럼값이 하한값 이상이고 상한값 이하인 데이터
*/
-- EMPLOYEE 테이블에서 급여가 350만원 이상 600만원 이하인 사원들의 사번, 사원명, 급여 조회
SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY BETWEEN 3500000 AND 6000000;

-- EMPLOYEE 테이블에서 급여가 350만원 미만 600만원 초과인 사원들의 사번, 사원명, 급여 조회
SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE SALARY < 3500000 OR SALARY > 6000000;

-- EMPLOYEE 테이블에서 급여가 350만원 미만 600만원 초과인 사원들의 사번, 사원명, 급여 조회
SELECT EMP_ID, EMP_NAME, SALARY
FROM EMPLOYEE
WHERE NOT SALARY BETWEEN 3500000 AND 6000000;
-- WHERE SALARY NOT BETWEEN 3500000 AND 6000000;
-- NOT은 논리부정 연산자(컬럼명 앞 또는 BETWEEN 앞에 기입)

-- EMPLOYEE 테이블에서 입사일이 90년 1월 1일부터 99년 12월 31일까지인 사원들의 사번, 사원명, 입사일 조회
SELECT EMP_ID, EMP_NAME, HIRE_DATE
FROM EMPLOYEE
WHERE HIRE_DATE BETWEEN '90/1/1' AND '99/12/31';

/*
LIKE
비교하고자하는 컬럼값이 내가 제시한 특정 패턴에 만족하는 경우 조회

비교대상컬럼 LIKE'특정패턴'
특정패턴 : %(0글자 이상 모든 글씨), _(한 글자인 모든 글씨)

예) LIKE '문자%' : 문자로 시작하는 모든 단어(문자, 문자열, 문자데이터 등)
예) LIKE '%문자' : 문자로 끝나는 모든 단어(문자, 한문자, 세계문자 등)
예) LIKE '%문자%' : 문자가 포함된 모든 단어(문자, 문자열, 세계문자, 한문자데이터 등)

예) LIKE '_문자' : 문자 앞에 한 글자가 있는 단어(한문자, 단문자, 중문자 등) *무조건 문자앞에 한 글자가 있어야됨
예) LIKE '__문자' : 문자 앞에 두 글자가 있는 단어(세계문자, 한국문자 등) *무조건 문자앞에 두 글자가 있어야됨
예) LIKE '문자_' : 문자 뒤에 한 글자가 있는 단어(문자열, 문자학, 문자일 등) *무조건 문자뒤에 한 글자가 있어야됨
예) LIKE '_문자_' : 문자 앞 뒤에 한 글자씩 있는 단어(한문자열, 단문자열, 계문자일 등) *무조건 문자 앞 뒤에 한 글자씩 있어야됨

*/

-- EMPLOYEE 테이블에서 사원들의 성이 전씨인 사원들의 사원명, 급여, 입사일 조회
SELECT EMP_NAME, SALARY, HIRE_DATE
FROM EMPLOYEE
WHERE EMP_NAME LIKE '전%';

-- EMPLOYEE 테이블에서 사원들의 이름에 '하'가 포함되어 있는 사원들의 사원명, 주민번호, 전화번호 조회
SELECT EMP_NAME, EMP_NO, PHONE
FROM EMPLOYEE
WHERE EMP_NAME LIKE '%하%';

-- EMPLOYEE 테이블에서 사원들의 이름 가운데에 '하'가 포함되어 있는 사원들의 사원명, 전화번호 조회
SELECT EMP_NAME, PHONE
FROM EMPLOYEE
WHERE EMP_NAME LIKE '_하_';

-- EMPLOYEE 테이블에서 사원들의 전화번호의 3번째 자리가 1인 사번, 사원명, 전화번호 조회
SELECT EMP_ID, EMP_NAME, PHONE
FROM EMPLOYEE
WHERE PHONE LIKE '__1%';

-- EMPLOYEE 테이블에서 사원들의 이메일 _앞에 글자가 3글자인 사원들의 사원명, 이메일 조회
SELECT EMP_NAME, EMAIL
FROM EMPLOYEE
WHERE EMAIL LIKE '____%'; -- 언더바 4개로 인식 4글자 이상의 이메일을 가져옴
-- 데이터값으로 취급하고자하는 값 앞에 나만의 와일드카드(아무거나 가능)를 제시하고 ESCATE에 등록
-- 특수기호 중 &는 사용자로부터 입력받는 키워드 임으로 오라클에서는 사용하지 않는 것이 좋음
SELECT EMP_NAME, EMAIL
FROM EMPLOYEE
WHERE EMAIL LIKE '___*_%' ESCAPE '*';

-- EMPLOYEE 테이블에서 사원들의 이메일 _앞에 글자가 3글자인 사원들을 제외한 사원명, 이메일 조회
SELECT EMP_NAME, EMAIL
FROM EMPLOYEE
WHERE NOT EMAIL LIKE '___E_%' ESCAPE 'E';

-- EMPLOYEE에서 이름이 '연'으로 끝나는 사원들의 사원명, 입사일 조회
SELECT EMP_NAME, HIRE_DATE
FROM EMPLOYEE
WHERE EMP_NAME LIKE '%연';

-- EMPLOYEE에서 전화번호 처음 3자리가 010이 아닌 사원들의 사원명, 전화번호 조회
SELECT EMP_NAME, PHONE
FROM EMPLOYEE
WHERE NOT PHONE LIKE '010%';

-- EMPLOYEE에서 이름에 '하'가 포함되어 있고 급여가 240만원 이상인 사원들의 사원명, 급여 조회
SELECT EMP_NAME, SALARY
FROM EMPLOYEE
WHERE EMP_NAME LIKE '%하%' AND SALARY >= 2400000;

-- DEPARTMENT에서 해외영업부인 부서들의 부서코드, 부서명 조회
SELECT DEPT_ID, DEPT_TITLE
FROM DEPARTMENT
WHERE DEPT_TITLE LIKE '해외영업%';

/*
IS NULL
IS NOT NULL
컬럼값이 NULL인 경우, NULL값 비교에 사용하는 연산자
*/

-- EMPLOYEE 테이블에서 보너스를 받지 않은 사람들의 사번, 사원명, 급여, 보너스 조회
SELECT EMP_ID, EMP_NAME, SALARY, BONUS
FROM EMPLOYEE
WHERE BONUS IS NULL;

-- EMPLOYEE 테이블에서 보너스를 받는 사람들의 사번, 사원명, 급여, 보너스 조회
SELECT EMP_ID, EMP_NAME, SALARY, BONUS
FROM EMPLOYEE
WHERE BONUS IS NOT NULL;

-- EMPLOYEE 테이블에서 매니저ID가 NULL인 사원들의 사원명, 부서코드, 사수번호를 조회
SELECT EMP_NAME, DEPT_CODE, MANAGER_ID
FROM EMPLOYEE
WHERE MANAGER_ID IS NULL;

-- EMPLOYEE 테이블에서 부서배치를 받지 못했지만 보너스를 받는 사원들의 사번, 사원명, 부서코드, 보너스를 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE, BONUS
FROM EMPLOYEE
WHERE DEPT_CODE IS NULL AND BONUS IS NOT NULL;

-- EMPLOYEE 테이블에서 부서코드가 'D8'이거나 'D6'이거나 'D9'인 사원들의 사원명, 부서코드, 급여를 조회
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D6' OR DEPT_CODE = 'D8' OR DEPT_CODE = 'D9';
-- IN : 컬럼값이 내가 제시한 목록중에 일치하는 값이 있는 것만 조회
-- NOT IN : 컬럼값이 내가 제시한 목록중에 일치하는 값을 제외한 나머지만 조회
-- 비교대상할 컬럼명 IN(값1, 값2, ...)
SELECT EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D6', 'D8', 'D9');

/*
연산자 우선순위
1. ()
2. 산술연산자
3. 연결연산자
4. 비교 연산자
5. IS NULL/LIKE '특정패턴'/IN
6. BETWEEN AND
7. NOT(논리연산자)
8. AND(논리연산자)
9. OR(논리연산자)

** OR보다 AND가 먼저 연산됨
*/

-- EMPLOYEE 테이블에서 직급코드가 'J7'이거나 'J2'인 사원들 중 급여가 200만원 이상인 사원들의 모든 컬럼 조회
SELECT *
FROM EMPLOYEE
-- WHERE JOB_CODE = 'J7' OR JOB_CODE = 'J2' AND SALARY >= 2000000; AND(논리연산자)가 먼저 처리됨
WHERE (JOB_CODE = 'J7' OR JOB_CODE = 'J2') AND SALARY >= 2000000; 

/*
ORDER BY절
SELECT문의 가장 마지막 줄에 작성
실행 순서 또한 마지막에 실행

SELECT 컬럼명, ...
FROM 테이블명
WHERE 조건식
ORDER BY 정렬기준의 컬렴명 |별칭| 컬럼순번 [ASC|DESC][NULLS FIRST|NULL LAST];

ASC : 오름차순 정렬(기본값)
DESC : 내림차순 정렬

NULLS FIRST : 컬럼값에 NULL값이 있을 경우 맨 앞에 배치(생략시 DESC일 때의 기본값)
NULLS LAST : 컬럼값에 NULL값이 있을 경우 맨 뒤에 배치(생략시 ASC일때의 기본값)

ORDER BY절의 컬럼명은 SELECT절의 별칭을 사용해도 됨
*/

-- EMPLOYEE 테이블의 모든 컬럼 조회. 정렬기준은 보너스의 내림차순 정렬, 보너스가 같으면 급여의 오름차순 정렬로 조회
SELECT *
FROM EMPLOYEE
ORDER BY BONUS DESC NULLS LAST, SALARY DESC;

-- EMPLOYEE 테이블의 모든 사원명, 연봉 조회(이때 연봉의 내림차순 정렬 조회)
SELECT EMP_NAME, SALARY*12 연봉
FROM EMPLOYEE
ORDER BY 연봉 DESC;
-- ORDER BY 2 DESC; 2는 두번째 컬럼이라는 의미



-- 사수가 없고 부서배치도 받지 않은 사원들의 사원명, 사수사번, 부서코드 조회
SELECT EMP_NAME, MANAGER_ID, DEPT_CODE
FROM EMPLOYEE
WHERE MANAGER_ID IS NULL AND DEPT_CODE IS NULL;

-- 연봉(보너스포함X)이 3000만원 이상이고 보너스를 받지 않은 사원들의 사번, 사원명, 연봉, 보너스 조회
SELECT EMP_ID, EMP_NAME, SALARY*12 연봉, BONUS
FROM EMPLOYEE
WHERE SALARY*12 >= 30000000 AND BONUS IS NULL;

-- 입사일이 95/01/01이상이고 부서배치를 받은 사원들의 사번, 사원명, 입사일, 부서코드 조회
SELECT EMP_ID, EMP_NAME, HIRE_DATE, DEPT_CODE
FROM EMPLOYEE
WHERE HIRE_DATE >= '95/01/01' AND DEPT_CODE IS NOT NULL
ORDER BY HIRE_DATE;

-- 급여가 200만원 이상 500만원 이하고 입사일이 01/01/01이상이고 보너스를 받지 않는 사원들의 사번, 사원명, 급여, 입사일, 보너스 조회
SELECT EMP_ID, EMP_NAME, SALARY, HIRE_DATE, BONUS
FROM EMPLOYEE
WHERE (SALARY BETWEEN 2000000 AND 5000000) AND HIRE_DATE >= '01/01/01' AND BONUS IS NULL;  

-- 보너스포함 연봉이 NULL이 아니고 이름에 '하'가 포함되어 있는 사원들의 사번, 사원명, 급여, 보너스포함연봉 조회 (별칭부여)
SELECT EMP_ID, EMP_NAME, SALARY, SALARY*(1+BONUS)*12 "보너스 포함 연봉"
FROM EMPLOYEE
WHERE SALARY*(1+BONUS)*12 IS NOT NULL AND EMP_NAME LIKE '%하%';

------------------------------- 종합 문제 ----------------------------------
-- 1. JOB 테이블에서 모든 정보 조회
SELECT *
FROM JOB;

-- 2. JOB 테이블에서 직급 이름 조회
SELECT JOB_NAME
FROM JOB;

-- 3. DEPARTMENT 테이블에서 모든 정보 조회
SELECT *
FROM DEPARTMENT;

-- 4. EMPLOYEE테이블의 직원명, 이메일, 전화번호, 고용일 조회
SELECT EMP_NAME, EMAIL, PHONE, HIRE_DATE
FROM EMPLOYEE;

-- 5. EMPLOYEE테이블의 고용일, 사원 이름, 월급 조회
SELECT HIRE_DATE, EMP_NAME, SALARY
FROM EMPLOYEE;

-- 6. EMPLOYEE테이블에서 이름, 연봉, 총수령액(보너스포함), 실수령액(총수령액 - (연봉*세금 3%)) 조회
SELECT EMP_NAME, SALARY*12 연봉, (SALARY+SALARY*BONUS)*12 총수령액, (SALARY+SALARY*BONUS)*12-((SALARY*12)*0.03) 실수령액
FROM EMPLOYEE;

-- 7. EMPLOYEE테이블에서 JOB_CODE가 J1인 사원의 이름, 월급, 고용일, 연락처 조회
SELECT EMP_NAME, SALARY, HIRE_DATE, PHONE
FROM EMPLOYEE
WHERE JOB_CODE = 'J1';

-- 8. EMPLOYEE테이블에서 실수령액(6번 참고)이 5천만원 이상인 사원의 이름, 월급, 실수령액, 고용일 조회
SELECT EMP_NAME, SALARY, (SALARY+SALARY*BONUS)*12-((SALARY*12)*0.03) 실수령액, HIRE_DATE
FROM EMPLOYEE
WHERE (SALARY+SALARY*BONUS)*12-((SALARY*12)*0.03) >= 50000000;

-- 9. EMPLOYEE테이블에 월급이 4000000이상이고 JOB_CODE가 J2인 사원의 전체 내용 조회
SELECT *
FROM EMPLOYEE
WHERE SALARY >= 4000000 AND JOB_CODE = 'J2';

-- 10. EMPLOYEE테이블에 DEPT_CODE가 D9이거나 D5인 사원 중 고용일이 02년 1월 1일보다 빠른 사원의 이름, 부서코드, 고용일 조회
SELECT EMP_NAME, DEPT_CODE, HIRE_DATE
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D9', 'D5') AND HIRE_DATE <= '02/01/01'
ORDER BY HIRE_DATE;

-- 11. EMPLOYEE테이블에 고용일이 90/01/01 ~ 01/01/01인 사원의 전체 내용을 조회
SELECT *
FROM EMPLOYEE
WHERE HIRE_DATE BETWEEN '90/01/01' AND '01/01/01'
ORDER BY HIRE_DATE;

-- 12. EMPLOYEE테이블에서 이름 끝이 '연'으로 끝나는 사원의 이름 조회
SELECT EMP_NAME
FROM EMPLOYEE
WHERE EMP_NAME LIKE '%연';

-- 13. EMPLOYEE테이블에서 전화번호 처음 3자리가 010이 아닌 사원의 이름, 전화번호를 조회
SELECT EMP_NAME, PHONE
FROM EMPLOYEE
WHERE NOT PHONE LIKE '010%';

-- 14. EMPLOYEE테이블에서 메일주소 '_'의 앞이 4자이면서 DEPT_CODE가 D9 또는 D6이고 고용일이 90/01/01 ~ 00/12/01이고, 급여가 270만 이상인 사원의 전체를 조회
SELECT *
FROM EMPLOYEE
WHERE EMAIL LIKE '____E_%' ESCAPE 'E' AND DEPT_CODE IN ('D9', 'D6') AND HIRE_DATE BETWEEN '90/01/01' AND '00/12/01' AND SALARY >= 2700000;


